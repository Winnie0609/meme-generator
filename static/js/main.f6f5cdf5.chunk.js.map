{"version":3,"sources":["component/meme.js","App.js","index.js"],"names":["Meme","template","onClick","className","src","url","alt","name","App","useState","templates","setTemplates","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","start","setStart","restart","imageURL","a","console","log","fetch","response","blob","blobURl","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","useEffect","then","res","json","data","memes","downloadMeme","style","margin","target","rel","onSubmit","e","preventDefault","params","template_id","id","text0","text1","username","process","password","obj","Object","entries","map","key","value","join","placeholder","onChange","type","reactDom","render","getElementById"],"mappings":"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","file":"static/js/main.f6f5cdf5.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../index.css\"\r\n\r\nfunction Meme({template, onClick}){\r\n    return(\r\n        <div className=\"meme-name\">\r\n            <img  \r\n                src={template.url} \r\n                alt={template.name}\r\n                onClick={onClick}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Meme","import React, {useState, useEffect} from \"react\"\r\nimport Meme from \"./component/meme\"\r\nimport \"./index.css\"\r\n\r\nconst username = process.env.REACT_APP_IMGFLIP_USERNAME\r\nconst password = process.env.REACT_APP_IMGFLIP_PASSWORD\r\n\r\nconst objectToQueryParam = (obj) => {\r\n    const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`)\r\n    return \"?\" + params.join(\"&\")\r\n}\r\n\r\nfunction App() {\r\n    const [templates, setTemplates] = useState([])\r\n    const [template, setTemplate] = useState(null)\r\n    const [topText, setTopText] = useState(\"Top Text\")\r\n    const [bottomText, setBottomText] = useState(\"Bottom Text\")\r\n    const [meme, setMeme] = useState(null)\r\n    const [start, setStart] = useState(true)\r\n    \r\n    useEffect(() => {\r\n      fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(res => res.json()\r\n        .then(json => setTemplates(json.data.memes)) \r\n      )},[])\r\n\r\n    function restart() {\r\n      setMeme(null)\r\n      setTemplate(null)\r\n      setTopText(\"\")\r\n      setBottomText(\"\")\r\n    }\r\n\r\n    async function downloadMeme(imageURL) {\r\n      console.log(imageURL)\r\n      // fetch the image blob\r\n      const url = imageURL\r\n      const response = await fetch(url)\r\n      console.log(response)\r\n\r\n      const blob = await response.blob()\r\n      console.log(blob)\r\n      \r\n      // create an objectURL\r\n      const blobURl = URL.createObjectURL(blob)\r\n      console.log(blobURl)\r\n\r\n      // set <a> tag's href to blob url\r\n      const link = document.createElement('a')\r\n      link.href = blobURl\r\n      link.download = \"meme\"\r\n\r\n      // Append link and trigger the download\r\n      document.body.appendChild(link)\r\n      link.click()\r\n    }\r\n\r\n    if (meme) {\r\n      return (\r\n        <div className=\"showPage\">\r\n          <div className=\"show-header\">\r\n            <h1>Meme Generator</h1>\r\n            <p>Feel free to download you meme!</p>\r\n          </div>\r\n          <div className=\"new-meme\">\r\n            <button onClick={() => restart()}>Create more Meme!</button>\r\n            <img src={ meme } alt=\"custom meme\" />\r\n            <button onClick={() => downloadMeme(meme)}>Download</button>\r\n          </div>\r\n            <div style={{margin:\"20px\"}}></div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"all-memes\">\r\n        {start && (\r\n          <div className=\"landing\">\r\n            <div className=\"start\">\r\n              <h1>Meme Generator</h1>\r\n              <p>I am so happy to be a meme.</p>\r\n              <button onClick={()=> setStart(!start)}>\r\n                Get started <i className=\"fas fa-chevron-right\"></i>\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"credit\"> Picture credits to : \r\n              <a href=\"https://www.inverse.com/article/60923-strange-planet-book-visual-glossary\" target=\"_blank\" rel=\"noreferrer\">JAKE KLEINMAN</a>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {!start && template && (\r\n          <div className=\"editPage\">\r\n            <button onClick={() => restart()} className=\"back-btn\">\r\n              <i className=\"fas fa-arrow-left\"></i>\r\n                Back to template\r\n            </button>\r\n\r\n             <div className=\"edit-header\">\r\n                <h1>Meme Generator</h1>\r\n                <p>Add Some Word to The Picture.</p>\r\n              </div>\r\n\r\n            <form \r\n                onSubmit = { async(e) => {\r\n                  e.preventDefault()\r\n\r\n                  const params = {\r\n                    template_id: template.id,\r\n                    text0: topText,\r\n                    text1: bottomText,\r\n                    username: username,\r\n                    password: password,\r\n                  }\r\n\r\n                  const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`)\r\n                  const json = await response.json()\r\n                  setMeme (json.data.url)\r\n                }}\r\n              >\r\n              <div className=\"edit-place \">\r\n                <div className=\"edit-img-name\">\r\n                  <Meme template = {template} />\r\n                  <p>{template.name}</p>\r\n                </div>\r\n\r\n                <div className=\"edit-input\">\r\n                    <input \r\n                      className = \"top-text\"\r\n                      placeholder = \"Top Text\"\r\n                      value = {topText}\r\n                      onChange={(e) => setTopText(e.target.value)}\r\n                    />\r\n\r\n                    <input \r\n                      placeholder = \"Bottom Text\"\r\n                      value = {bottomText}\r\n                      onChange={(e) => setBottomText(e.target.value)}\r\n                    />\r\n                      <button type = \"submit\"> Generate </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n\r\n        {!start && !template && (\r\n          <div className=\"templatePage\">\r\n            <div className=\"template-header\">\r\n              <h1>Meme Generator</h1>\r\n              <p>I am so happy to be a meme.</p>\r\n            </div>\r\n\r\n            <div className=\"meme meme-card\">\r\n              {templates.map((template) => {\r\n                return (\r\n                  <>\r\n                    <Meme \r\n                      key = {template.id}\r\n                      template={template}\r\n                      onClick={() => {setTemplate(template)}}\r\n                    />\r\n                  </>\r\n                )\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import React from \"react\"\nimport reactDom from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\n\n\nreactDom.render(\n    <>\n      <App/>\n    </> \n,document.getElementById(\"root\"))"],"sourceRoot":""}